{"ast":null,"code":"var _jsxFileName = \"/Volumes/256GB/REACT/forms-password/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  /**\n   * Challenge: Connect the form to local state\n   * \n   * 1. Create a state object to store the 4 values we need to save.\n   * 2. Create a single handleChange function that can\n   *    manage the state of all the inputs and set it up\n   *    correctly\n   * 3. When the user clicks \"Sign up\", check if the \n   *    password & confirmation match each other. If\n   *    so, log \"Successfully signed up\" to the console.\n   *    If not, log \"passwords to not match\" to the console.\n   * 4. Also when submitting the form, if the person checked\n   *    the \"newsletter\" checkbox, log \"Thanks for signing\n   *    up for our newsletter!\" to the console.\n   */\n  const [formData, setFormData] = React.useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    join: \"\"\n  });\n\n  function handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email address\",\n        className: \"form--input\",\n        value: formData.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        className: \"form--input\",\n        value: formData.password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Confirm password\",\n        className: \"form--input\",\n        value: formData.confirmPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form--marketing\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"okayToEmail\",\n          type: \"checkbox\",\n          checked: formData.j\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"okayToEmail\",\n          children: \"I want to join the newsletter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"form--submit\",\n        children: \"Sign up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"ngn04Tos+lAthOToSoY7PCP4SEY=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","App","formData","setFormData","useState","email","password","confirmPassword","join","handleSubmit","event","preventDefault","j"],"sources":["/Volumes/256GB/REACT/forms-password/src/components/App.js"],"sourcesContent":["import React from \"react\"\n\nexport default function App() {\n    \n    /**\n     * Challenge: Connect the form to local state\n     * \n     * 1. Create a state object to store the 4 values we need to save.\n     * 2. Create a single handleChange function that can\n     *    manage the state of all the inputs and set it up\n     *    correctly\n     * 3. When the user clicks \"Sign up\", check if the \n     *    password & confirmation match each other. If\n     *    so, log \"Successfully signed up\" to the console.\n     *    If not, log \"passwords to not match\" to the console.\n     * 4. Also when submitting the form, if the person checked\n     *    the \"newsletter\" checkbox, log \"Thanks for signing\n     *    up for our newsletter!\" to the console.\n     */\n    \n    const [formData, setFormData] = React.useState(\n        {\n            email: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            join: \"\"\n        }\n    )\n\n    function handleSubmit(event) {\n        event.preventDefault()\n    }\n    \n    return (\n        <div className=\"form-container\">\n            <form className=\"form\" onSubmit={handleSubmit}>\n                <input \n                    type=\"email\" \n                    placeholder=\"Email address\"\n                    className=\"form--input\"\n                    value={formData.email}\n                />\n                <input \n                    type=\"password\" \n                    placeholder=\"Password\"\n                    className=\"form--input\"\n                    value={formData.password}\n                />\n                <input \n                    type=\"password\" \n                    placeholder=\"Confirm password\"\n                    className=\"form--input\"\n                    value={formData.confirmPassword}\n                />\n                \n                <div className=\"form--marketing\">\n                    <input\n                        id=\"okayToEmail\"\n                        type=\"checkbox\"\n                        checked={formData.j}\n                        \n                    />\n                    <label htmlFor=\"okayToEmail\">I want to join the newsletter</label>\n                </div>\n                <button \n                    className=\"form--submit\"\n                >\n                    Sign up\n                </button>\n            </form>\n        </div>\n    )\n}\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAE1B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAEI,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,KAAK,CAACI,QAAN,CAC5B;IACIC,KAAK,EAAE,EADX;IAEIC,QAAQ,EAAE,EAFd;IAGIC,eAAe,EAAE,EAHrB;IAIIC,IAAI,EAAE;EAJV,CAD4B,CAAhC;;EASA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;IACzBA,KAAK,CAACC,cAAN;EACH;;EAED,oBACI;IAAK,SAAS,EAAC,gBAAf;IAAA,uBACI;MAAM,SAAS,EAAC,MAAhB;MAAuB,QAAQ,EAAEF,YAAjC;MAAA,wBACI;QACI,IAAI,EAAC,OADT;QAEI,WAAW,EAAC,eAFhB;QAGI,SAAS,EAAC,aAHd;QAII,KAAK,EAAEP,QAAQ,CAACG;MAJpB;QAAA;QAAA;QAAA;MAAA,QADJ,eAOI;QACI,IAAI,EAAC,UADT;QAEI,WAAW,EAAC,UAFhB;QAGI,SAAS,EAAC,aAHd;QAII,KAAK,EAAEH,QAAQ,CAACI;MAJpB;QAAA;QAAA;QAAA;MAAA,QAPJ,eAaI;QACI,IAAI,EAAC,UADT;QAEI,WAAW,EAAC,kBAFhB;QAGI,SAAS,EAAC,aAHd;QAII,KAAK,EAAEJ,QAAQ,CAACK;MAJpB;QAAA;QAAA;QAAA;MAAA,QAbJ,eAoBI;QAAK,SAAS,EAAC,iBAAf;QAAA,wBACI;UACI,EAAE,EAAC,aADP;UAEI,IAAI,EAAC,UAFT;UAGI,OAAO,EAAEL,QAAQ,CAACU;QAHtB;UAAA;UAAA;UAAA;QAAA,QADJ,eAOI;UAAO,OAAO,EAAC,aAAf;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAPJ;MAAA;QAAA;QAAA;QAAA;MAAA,QApBJ,eA6BI;QACI,SAAS,EAAC,cADd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QA7BJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA,QADJ;AAuCH;;GAtEuBX,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}